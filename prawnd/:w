use anyhow::{bail,Result};

use chrono::{Local,Duration};

#[allow(unused_imports)]
use tracing::{info,debug,warn,error,trace,Level};
use tracing_subscriber as ts;
use tracing_appender as ta;

mod task;
mod tasks;
mod schedule;

const LOG_PATH: &'static str = "/home/lethe/.local/prawn/log";

fn init_log() -> Result<ta::non_blocking::WorkerGuard> {
    std::fs::DirBuilder::new()
        .recursive(true)
        .create(LOG_PATH)?;

    let prefix = "testing.log";
    let (file, guard) = ta::non_blocking(ta::rolling::never(LOG_PATH,prefix));
    ts::fmt()
        .with_writer(file)
        .with_max_level(Level::DEBUG)
        .init();

    debug!("Log init successful");
    Ok(guard)
}

fn print_usage() {
    println!(
r#"USAGE: prawnd COMMAND

commands:
    register : registers systemd timer
    unregister : unregisters systemd timer
    status : displays status"#);
}

fn run() -> Result<()> {
    match std::env::args().nth(1) {
        Some(command) if command == "register" => {
            debug!("Called with register");
            match schedule::register(Local::now() + Duration::seconds(15)) {
                Ok(timer_id) => {
                    println!("timer id: {}", timer_id);
                    Ok(())
                },
                Err(e) => Err(e),
            }
        },
        Some(command) if command == "unregister" => {
            debug!("Called with unregister");
            schedule::unregister()
        },
        Some(command) if command == "status" => {
            debug!("Called with status");
            Ok(())
        },
        Some(command) => {
            debug!("Called with some other command: {}", command);
            println!("Command not recognized");
            print_usage();
            Ok(())
        },
        None => {
            debug!("Called with no argument");
            print_usage();
            Ok(())
        },
    }
}

fn main() {
    let _guard = init_log().expect("Error during log init");
    match run() {
        Ok(_) => {},
        Err(e) => {
            eprintln!("ERROR: {}", e);
            error!("Exiting with error {}", e);
        },
    }
}
